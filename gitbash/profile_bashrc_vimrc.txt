# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.
# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
#umask 022
# if running bash
if [ -n "$BASH_VERSION" ]; then
    # include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
    . "$HOME/.bashrc"
    fi
fi
# set PATH so it includes user's private bin directories
PATH="$HOME/bin:$HOME/.local/bin:$PATH"
# fm kernel -j4
alias fm="m ONE_SHOT_MAKEFILE=build/target/board/Android.mk"
# cm bootimage -j4 and change boot.img
alias cm="m ONE_SHOT_MAKEFILE=vendor/lge/system/chargerlogo/Android.mk"
# odin cm bootimage -j4 and change boot.img
alias ocm="m ONE_SHOT_MAKEFILE=vendor/lge/system/chargerlogo_odin/Android.mk"
# recoveryfm recoveryimage -j4 and change recovery.img
alias recoveryfm="m ONE_SHOT_MAKEFILE=bootable/recovery/Android.mk"
# factoryfm factory_ramdisk -j4 and change boot.img, factory_ramdisk.img
alias factoryfm="m ONE_SHOT_MAKEFILE=vendor/lge/build/core/aspectj.mk"
# simply build
alias sm=sm
sm() {
    echo 'input build image: '
    read image
    m $image -j16 --gr=LAO_COM [ 1 ]
}
#rulechecker download
alias codingrule=codingrule
codingrule(){
    wget http://atos-storage.lge.net:8080/results/rulechecker/rulechecker.sh --no-check-certi
    chmod +x rulechecker.sh
}
#sync full build
alias syncfullbuild=syncfullbuild
syncfullbuild(){
    echo 'input model (ex:g3_lgu_kr)'
    read model
    repo forall -c git checkout -f; repo forall -c git clean -xfd; repo sync -cqj32; cd android; source ./build/envsetup.sh ; choosecombo 1 $model 2 ;  make -j32 ;
}
alias fullbuild=fullbuild
fullbuild(){
    echo 'input model (ex:g3_lgu_kr)'
    read model
    source ./build/envsetup.sh ; choosecombo 1 $model 2 ;  make -j32 ;
}
alias kernelbuild=kernelbuild
kernelbuild() {
    echo 'input model (ex:g3_lgu_kr)'
    read model
    source ./build/envsetup.sh ; choosecombo 1 $model 2 ;  m kernel -j32 ;
}
alias syncall=syncall
syncall(){
    repo forall -c git checkout -f; repo forall -c git clean -xfd; repo sync -cqj32;
}





# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples
# If not running interactively, don't do anything
[ -z "$PS1" ] && return
# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth
# append to the history file, don't overwrite it
shopt -s histappend
# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize
# If set, the pattern "*" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar
# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi
# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac
# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes
if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi
if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt
# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
)
    ;;
esac
# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi
# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s[0-9]\+\s//;s/[;&|]\salert$//'\'')"'
# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi
# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi
alias ..='cd ..'
alias ..2='cd ../..'
alias ..3='cd ../../..'
alias ..4='cd ../../../..'
alias ..5='cd ../../../../..'
alias ..6='cd ../../../../../..'
alias ..7='cd ../../../../../../..'
alias ..8='cd ../../../../../../../..'
alias ..9='cd ../../../../../../../../..'







set nu
set ts=4 sw=4 sts=4
au FileType java set et
set tags=./tags;/
set tags+=~/.vim/tags/system-tags
if version >= 500
func! Sts()
        let st = expand("<cword>")
        exe "sts ".st
endfunc
nmap ,st :call Sts()<CR>
func! Tj()
        let st = expand("<cword>")
        exe "tj ".st
endfunc
nmap ,tj :call Tj()<CR>
endif
let Tlist_Auto_Open=1
let g:showmarks_enable=0
highlight ExtraWhitespace ctermbg=cyan guibg=cyan
match ExtraWhitespace /\s\+$/
nnoremap <silent> <F2> :set hlsearch!<CR>
nnoremap <silent> <F3> :Tlist<CR>
nnoremap <silent> <F4> <C-W>c
nnoremap <silent> <F5> :TlistUpdate<CR>
nnoremap <silent> <F6> :TlistSync<CR>
nnoremap <silent> <F7> :tp<cr>
nnoremap <silent> <F8> :tn<cr>
nnoremap <silent> <F9> :%!xxd<cr>
set mouse-=a